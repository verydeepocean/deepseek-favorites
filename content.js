// –§—É–Ω–∫—Ü–∏—è debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function getCleanMessageText(container) {
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π div –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
  const tempDiv = document.createElement('div');
  // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∏—Å–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const messageContent = container.querySelector('[class*="markdown-"]');
  if (!messageContent) return '';
  
  // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
  const clone = messageContent.cloneNode(true);
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const elementsToRemove = clone.querySelectorAll('button, [class*="ds-icon"], [role="button"]');
  elementsToRemove.forEach(el => el.remove());
  
  // –ü–æ–ª—É—á–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  tempDiv.innerHTML = clone.innerHTML;
  const cleanText = tempDiv.textContent.trim()
    .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    .replace(/^\d+\.\s*/, ''); // –£–¥–∞–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  
  return cleanText;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, isWarning = false) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  let notification = document.querySelector('.favorites-notification');
  if (notification) {
    notification.remove();
  }
  
  // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  notification = document.createElement('div');
  notification.className = 'favorites-notification';
  // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  const [title, text] = message.split('\n');
  notification.innerHTML = `
    <div style="font-weight: bold; margin-bottom: 4px;">${title}</div>
    <div style="font-size: 12px; opacity: 0.9;">${text || ''}</div>
  `;
  notification.style.cssText = `
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: ${isWarning ? '#FFA500' : '#4CAF50'};
    color: ${isWarning ? '#000000' : '#FFFFFF'};
    padding: 12px 24px;
    border-radius: 4px;
    font-size: 14px;
    z-index: 10000;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.3s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    max-width: 300px;
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  document.body.appendChild(notification);
  
  // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ
  setTimeout(() => {
    notification.style.opacity = '1';
    notification.style.transform = 'translateY(0)';
  }, 100);
  
  // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateY(20px)';
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
async function addToFavorites(chatTitle, messageText = '') {
  try {
    const favorite = {
      title: chatTitle,
      url: window.location.href,
      timestamp: new Date().toISOString(),
      description: messageText || ''
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await new Promise((resolve, reject) => {
      chrome.storage.sync.get(['favorites'], (result) => {
        try {
          const favorites = result.favorites || [];
          console.log('Current favorites:', favorites);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞
          if (!favorites.some(f => f.url === favorite.url)) {
            favorites.push(favorite);
            chrome.storage.sync.set({ favorites }, () => {
              if (chrome.runtime.lastError) {
                console.error('Error saving favorite:', chrome.runtime.lastError);
                reject(chrome.runtime.lastError);
              } else {
                console.log('Favorite saved successfully:', favorite);
                showNotification(`Added to Favorites! ‚≠ê\n"${chatTitle}"`, false);
                resolve();
              }
            });
          } else {
            console.log('Chat already in favorites');
            showNotification(`Already in Favorites! üîî\n"${chatTitle}"`, true);
            resolve();
          }
        } catch (error) {
          console.error('Error in storage operation:', error);
          reject(error);
        }
      });
    });
  } catch (error) {
    console.error('Error adding to favorites:', error);
    showNotification('Error saving to favorites! ‚ùå', true);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
function getChatTitle() {
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const selectors = [
    'div[class*="d8ed659a"]',
    'div[class*="chat-title"]',
    'div[class*="title"]',
    'h1',
    'div.title'
  ];

  for (const selector of selectors) {
    const element = document.querySelector(selector);
    if (element) {
      const title = element.textContent.trim();
      if (title) return title;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
  return 'Chat ' + new Date().toLocaleString();
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('Content script received message:', message);
  
  if (message.action === "addToFavorites") {
    console.log('Adding to favorites...');
    const chatTitle = getChatTitle();
    console.log('Chat title:', chatTitle);
    
    addToFavorites(chatTitle, message.selectionText)
      .then(() => {
        console.log('Successfully added to favorites');
        sendResponse({ success: true });
      })
      .catch((error) => {
        console.error('Error adding to favorites:', error);
        sendResponse({ success: false, error: error.message });
      });
    
    return true; // –í–∞–∂–Ω–æ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  }
});

// –°–æ–æ–±—â–∞–µ–º background script, —á—Ç–æ content script –∑–∞–≥—Ä—É–∂–µ–Ω
console.log('Content script loaded, sending ready message...');
chrome.runtime.sendMessage({ action: "contentScriptReady" }, (response) => {
  console.log('Ready message sent, response:', response);
}); 